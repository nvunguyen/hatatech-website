---
import { languages, getLangFromUrl } from '../i18n/config';

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

// Remove language prefix from current path
// For Vietnamese (default): keep path as-is
// For English: remove /en prefix
let pathWithoutLang = currentPath;
if (currentLang === 'en') {
    pathWithoutLang = currentPath.replace(/^\/en(\/|$)/, '/');
}

// Generate unique IDs to avoid conflicts when component is used multiple times
const uniqueId = Math.random().toString(36).substr(2, 9);
const buttonId = `language-menu-button-${uniqueId}`;
const menuId = `language-menu-${uniqueId}`;
---

<div class="relative inline-block text-left">
    <button
        id={buttonId}
        type="button"
        class="inline-flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-600 hover:text-green-600 transition duration-150 ease-in-out no-underline"
        aria-expanded="false"
        aria-haspopup="true"
    >
        {languages[currentLang]}
        <svg class="-mr-1 ml-1 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path
                fill-rule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clip-rule="evenodd"></path>
        </svg>
    </button>

    <div
        id={menuId}
        class="absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none hidden"
        role="menu"
        aria-orientation="vertical"
        aria-labelledby={buttonId}
    >
        <div class="py-1" role="none">
            {
                Object.entries(languages).map(([lang, name]) => {
                    const href = lang === 'vi' ? pathWithoutLang : `/${lang}${pathWithoutLang}`;
                    const isActive = lang === currentLang;
                    return (
                        <a
                            href={href}
                            class={`block px-4 py-2 text-sm transition duration-150 ease-in-out no-underline ${
                                isActive ? 'bg-green-50 text-green-700 font-medium' : 'text-gray-700 hover:bg-gray-50 hover:text-green-600'
                            }`}
                            role="menuitem"
                        >
                            {name}
                        </a>
                    );
                })
            }
        </div>
    </div>
</div>

<script define:vars={{ buttonId, menuId }}>
    document.addEventListener('DOMContentLoaded', () => {
        const button = document.getElementById(buttonId);
        const menu = document.getElementById(menuId);

        if (button && menu) {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();

                // Close any other open language menus
                document.querySelectorAll('[id^="language-menu-"]').forEach(otherMenu => {
                    if (otherMenu !== menu) {
                        otherMenu.classList.add('hidden');
                    }
                });

                // Toggle current menu
                menu.classList.toggle('hidden');
                const expanded = !menu.classList.contains('hidden');
                button.setAttribute('aria-expanded', expanded.toString());
            });

            // Close menu when clicking outside
            document.addEventListener('click', (e) => {
                if (!button.contains(e.target) && !menu.contains(e.target)) {
                    menu.classList.add('hidden');
                    button.setAttribute('aria-expanded', 'false');
                }
            });

            // Prevent menu from closing when clicking inside it
            menu.addEventListener('click', (e) => {
                e.stopPropagation();
            });
        }
    });
</script>
